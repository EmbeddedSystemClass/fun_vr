<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\core_0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\core_0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun Mar 24 00:37:05 2019
<BR><P>
<H3>Maximum Stack Usage =        692 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Voice_Recognition_Init &rArr; CSpotter_Init_Multi &rArr; CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">CIS_DMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">CIS_DMA_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">CIS_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">CIS_VSYNC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[49]">CRC16_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[46]">CSC_DMA_IN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[47]">CSC_DMA_OUT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3a]">CT32B0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3b]">CT32B1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3c]">CT32B2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">CT32B3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3e]">CT32B4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">CT32B5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[40]">CT32B6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[41]">CT32B7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">Core0_Issue_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">Core1_Issue_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">GPIO0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">GPIO1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[30]">GPIO2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">GPIO3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[32]">GPIO4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from bsp.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">I2C0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">I2C1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">I2C2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[29]">I2S0_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2a]">I2S1_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2b]">I2S2_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">I2S3_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">I2S4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">IDMA0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">IDMA1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">JPEG_DEC_DMA_IN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">JPEG_DEC_DMA_OUT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4b]">JPEG_ENC_DMA_IN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4c]">JPEG_ENC_DMA_OUT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">JPEG_ENC_END_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">NFECC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">PPU_HBLK_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">PPU_VBLK_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">SAR_ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[48]">SCRIPT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">SDIO_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">SDIO_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">SDNF_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[42]">SPI0_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[43]">SPI0_ECC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">SPI0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[44]">SPI1_DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[45]">SPI1_ECC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from main.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4d]">System_Init</a> from bsp.o(.text) referenced from startup.o(.text)
 <LI><a href="#[38]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[39]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">USBDEV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">USB_HOST0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">USB_HOST1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4a]">USB_suspend_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">WKP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[56]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[51]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[52]">_init_clock_setting</a> from bsp.o(.text) referenced from bsp.o(.constdata)
 <LI><a href="#[53]">_init_core_1_customize</a> from bsp.o(.text) referenced from bsp.o(.constdata)
 <LI><a href="#[54]">_init_icache</a> from bsp.o(.text) referenced from bsp.o(.constdata)
 <LI><a href="#[55]">_init_spi_nand</a> from bsp.o(.text) referenced from bsp.o(.constdata)
 <LI><a href="#[50]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4f]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[59]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[223]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[224]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[14b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[5f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[61]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[62]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[63]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[225]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[65]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[68]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6d]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[70]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[73]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[226]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[75]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[77]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[79]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[227]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[87]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[228]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[229]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[22b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[22e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[82]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[231]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[232]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[233]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[234]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[235]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[236]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[237]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[238]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[239]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[23d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[23e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[23f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[240]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[241]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[242]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[58]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[244]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[84]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[86]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[245]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[88]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Voice_Recognition_Init &rArr; CSpotter_Init_Multi &rArr; CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[246]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[15c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[247]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8f]"></a>Gain_Setting</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gain_Setting &rArr; AUD_RegRead &rArr; I2C_Master_Send &rArr; I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress
</UL>

<P><STRONG><a name="[248]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[95]"></a>Alg_Process_PLDCore</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Alg_Process_PLDCore
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress
</UL>

<P><STRONG><a name="[92]"></a>Voice_Recognition_Progress</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = Voice_Recognition_Progress &rArr; Voice_Recognition_Result &rArr; CSpotter_AddSample &rArr; NINJA_API_13 &rArr; NINJA_API_11 &rArr; BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_SetRejectionLevel
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Result
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Process_PLDCore
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>UnpackBin</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnpackBin
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[97]"></a>Voice_Recognition_Init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = Voice_Recognition_Init &rArr; CSpotter_Init_Multi &rArr; CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_SetRejectionLevel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_Multi
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetNumWord
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_Multi
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackBin
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Alg_Process_PLDInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Alg_Process_PLDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALG_Init
</UL>

<P><STRONG><a name="[9f]"></a>Alg_Get_Wram_Size</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALG_Init
</UL>

<P><STRONG><a name="[9e]"></a>ALG_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ALG_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Get_Wram_Size
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Process_PLDInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>AGC_Init</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AGC_Init &rArr; SNX_AGC_Process_init &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Record_Start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Record_Start &rArr; External_Audio_Codec_Init &rArr; SNAUD01_MasterMode_Init &rArr; SNAUD01_dac_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Audio_Codec_Init (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_to_Codec_Sampling_Rate (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_to_Codec_Channel (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Gain_Ctrl (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = main &rArr; Voice_Recognition_Init &rArr; CSpotter_Init_Multi &rArr; CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Init (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NR_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ADC_Time_Up
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGC_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALG_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ac]"></a>Is_ADC_Time_Up</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Is_ADC_Time_Up &rArr; ADC_Get_Rx_Index &rArr; I2S_Get_RxBuf_Idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Rx_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Alg_Settings</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Alg_Settings
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NR_Init
</UL>

<P><STRONG><a name="[ab]"></a>NR_Init</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NR_Init &rArr; Alg_Settings
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Settings
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>get_a_frame_length</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>Voice_Recognition_Result</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = Voice_Recognition_Result &rArr; CSpotter_AddSample &rArr; NINJA_API_13 &rArr; NINJA_API_11 &rArr; BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetResult
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_AddSample
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bsp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>System_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CIS_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIS_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIS_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CIS_VSYNC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CRC16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CSC_DMA_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CSC_DMA_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CT32B0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CT32B1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CT32B2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CT32B3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CT32B4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CT32B5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CT32B6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CT32B7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Core0_Issue_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Core1_Issue_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S0_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S1_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S2_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2S3_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IDMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>JPEG_DEC_DMA_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>JPEG_DEC_DMA_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>JPEG_ENC_DMA_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>JPEG_ENC_DMA_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>JPEG_ENC_END_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>NFECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PPU_HBLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PPU_VBLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SAR_ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SCRIPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SDIO_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SDNF_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI0_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI0_ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI1_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBDEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB_HOST0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USB_HOST1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USB_suspend_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b3]"></a>ADC_Set_Channel_Mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Set_Channel_Mode &rArr; I2S_Set_MONO_STEREO
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_MONO_STEREO
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[b6]"></a>ADC_Turn_On</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Turn_On &rArr; I2S_Set_BCLK &rArr; _FPLL_case
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_UnMute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Format
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Data_Len
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Ch_Len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Rx_Enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_MODE
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[c0]"></a>ADC_Pause_Switch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Pause
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>

<P><STRONG><a name="[c3]"></a>ADC_Set_DMA_Address_and_Length</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Set_DMA_Address_and_Length &rArr; I2S_Set_RxBuf2_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf2_Offset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf1_Addr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_DMA_Len
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[ad]"></a>ADC_Get_Rx_Index</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Get_Rx_Index &rArr; I2S_Get_RxBuf_Idx
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_RxBuf_Idx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_RxBuf1_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_ADC_Time_Up
</UL>

<P><STRONG><a name="[a9]"></a>ADC_Enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, codec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Enable &rArr; ADC_Turn_On &rArr; I2S_Set_BCLK &rArr; _FPLL_case
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_DMA_Address_and_Length
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_Channel_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start
</UL>

<P><STRONG><a name="[c9]"></a>ADC_Disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>

<P><STRONG><a name="[cb]"></a>DAC_Set_Channel_Mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_MONO_STEREO
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Enable
</UL>

<P><STRONG><a name="[cc]"></a>DAC_Mute_Switch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_UnMute
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Mute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>

<P><STRONG><a name="[ce]"></a>DAC_Turn_On</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_UnMute
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Tx_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Format
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Data_Len
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Ch_Len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_MODE
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Enable
</UL>

<P><STRONG><a name="[d0]"></a>DAC_Set_DMA_Address_and_Length</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf2_Offset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf1_Addr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_DMA_Len
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Enable
</UL>

<P><STRONG><a name="[d3]"></a>DAC_Get_Tx_Index</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_TxBuf_Idx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_TxBuf1_Addr
</UL>

<P><STRONG><a name="[d6]"></a>DAC_Pause_Switch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Pause
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>

<P><STRONG><a name="[d7]"></a>DAC_Enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_DMA_Address_and_Length
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Channel_Mode
</UL>

<P><STRONG><a name="[d8]"></a>DAC_Disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, codec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serial_Number_is_Correct
</UL>

<P><STRONG><a name="[d9]"></a>I2C_Set_Start_Condition</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Set_Start_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[db]"></a>I2C_Clear_Flag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[dc]"></a>I2C_Enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[dd]"></a>I2C_Disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[de]"></a>I2C_Read_Status</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Read_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Hit_Status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[df]"></a>I2C_Receive_Data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Receive_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
</UL>

<P><STRONG><a name="[e0]"></a>I2C_Send_ACK</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Send_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
</UL>

<P><STRONG><a name="[e1]"></a>I2C_Send_Data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[e2]"></a>I2C_Send_NACK</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Send_NACK
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
</UL>

<P><STRONG><a name="[e3]"></a>I2C_Set_Stop_Condition</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[e4]"></a>I2C_SlaveRxFIFO_Clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveRxFIFO_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[e5]"></a>I2C_SlaveTxFIFO_Clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveTxFIFO_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[e7]"></a>I2C_SlaveFIFO_EN</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SlaveFIFO_EN
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[e8]"></a>I2C_SlaveFIFO_Disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveFIFO_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[e9]"></a>I2C_SlaveFIFO_THD</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveFIFO_THD
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[ea]"></a>I2C_Initial</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Initial &rArr; I2C_SlaveFIFO_EN
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_THD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_Disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_EN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTxFIFO_Clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveRxFIFO_Clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_SlaveRxFIFO_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Address_Setting
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_Driver_Init (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>I2C_Deinit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Disable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[f1]"></a>I2C_Default_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Address_Setting
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[f2]"></a>I2C_Master_Send</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Master_Send &rArr; I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Start_Condition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>I2C_Master_Send_10bit</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Start_Condition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
</UL>

<P><STRONG><a name="[f6]"></a>I2C_Master_Recv</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Master_Recv &rArr; I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NACK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Start_Condition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead (via Veneer)
</UL>

<P><STRONG><a name="[f7]"></a>I2C_Master_Recv_10bit</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NACK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Start_Condition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
</UL>

<P><STRONG><a name="[f8]"></a>I2C_Slave_Send</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>

<P><STRONG><a name="[f9]"></a>I2C_Slave_Recv</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NACK
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2c_time_out_init
</UL>

<P><STRONG><a name="[fa]"></a>I2C_Slave_Hit_Status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
</UL>

<P><STRONG><a name="[24a]"></a>I2C_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>SPIFC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[102]"></a>SPIFC_Deinit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
</UL>

<P><STRONG><a name="[104]"></a>SPIFC_Read</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[105]"></a>SPIFC_Write</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[98]"></a>SPIFC_ReadWithDma</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, spifc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPIFC_ReadWithDma &rArr; IDMA_Start &rArr; _idma_redirect_to_sram &rArr; IDMA_Set_Burst_Unit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[108]"></a>SPIFC_WriteWithDma</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[109]"></a>SPIFC_Erase</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
</UL>

<P><STRONG><a name="[10a]"></a>SPIFC_RWStatus</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
</UL>

<P><STRONG><a name="[10b]"></a>SPIFC_SetQuadMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_clear_bit
</UL>

<P><STRONG><a name="[10c]"></a>SPIFC_SetAddrMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[10d]"></a>SPIFC_GetFactoryId</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spifc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
</UL>

<P><STRONG><a name="[24b]"></a>SPIFC_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifc.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>LOG_Util_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, log_util.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>LOG_Driver_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, log_util.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>LOG_Driver_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, log_util.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>LOG_Driver_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, log_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init (via Veneer)
</UL>

<P><STRONG><a name="[110]"></a>printf_uart</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, log_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_Off (via Veneer)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_On (via Veneer)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Volume_Control (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_debug_mode (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_list_all_reg (via Veneer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down (via Veneer)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down (via Veneer)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_up (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up (via Veneer)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Gain_Ctrl (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf_uart
</UL>

<P><STRONG><a name="[113]"></a>fprintf_uart</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, log_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart
</UL>

<P><STRONG><a name="[114]"></a>printf_swo</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, log_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf_swo
</UL>

<P><STRONG><a name="[115]"></a>fprintf_swo</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, log_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_swo
</UL>

<P><STRONG><a name="[24f]"></a>getchar_swo</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, log_util.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>I2S_Enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[bb]"></a>I2S_MODE</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_MODE
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[cf]"></a>I2S_Tx_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
</UL>

<P><STRONG><a name="[bc]"></a>I2S_Rx_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Rx_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[ca]"></a>I2S_Disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Disable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[b7]"></a>I2S_Set_Ch_Len</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_Ch_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[b8]"></a>I2S_Set_Data_Len</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_Data_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[b9]"></a>I2S_Set_Format</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_Format
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[b5]"></a>I2S_Set_MONO_STEREO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_MONO_STEREO
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Channel_Mode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_Channel_Mode
</UL>

<P><STRONG><a name="[11c]"></a>I2S_SEL_IMCLK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
</UL>

<P><STRONG><a name="[119]"></a>I2S_SET_BCLKDIV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FPLL_case
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XTAL_case
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IHRC_case
</UL>

<P><STRONG><a name="[ba]"></a>I2S_Set_BCLK</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_Set_BCLK &rArr; _FPLL_case
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SEL_IMCLK
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FPLL_case
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IMCLK_I2S_4_case
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XTAL_case
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IHRC_case
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[11e]"></a>I2S_Get_Rx_Toggle_IRQ</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>

<P><STRONG><a name="[11f]"></a>I2S_Get_Tx_Toggle_IRQ</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>

<P><STRONG><a name="[120]"></a>I2S_Set_Rx_Toggle_IRQ</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>

<P><STRONG><a name="[124]"></a>I2S_Set_Tx_Toggle_IRQ</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>

<P><STRONG><a name="[c6]"></a>I2S_Set_DMA_Len</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_DMA_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_DMA_Address_and_Length
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_DMA_Address_and_Length
</UL>

<P><STRONG><a name="[d1]"></a>I2S_Set_TxBuf1_Addr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_DMA_Address_and_Length
</UL>

<P><STRONG><a name="[d5]"></a>I2S_Get_TxBuf1_Addr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Get_Tx_Index
</UL>

<P><STRONG><a name="[d2]"></a>I2S_Set_TxBuf2_Offset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_DMA_Address_and_Length
</UL>

<P><STRONG><a name="[d4]"></a>I2S_Get_TxBuf_Idx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Get_Tx_Index
</UL>

<P><STRONG><a name="[c4]"></a>I2S_Set_RxBuf1_Addr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_RxBuf1_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_DMA_Address_and_Length
</UL>

<P><STRONG><a name="[c8]"></a>I2S_Get_RxBuf1_Addr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Get_RxBuf1_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Rx_Index
</UL>

<P><STRONG><a name="[c5]"></a>I2S_Set_RxBuf2_Offset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Set_RxBuf2_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_DMA_Address_and_Length
</UL>

<P><STRONG><a name="[c7]"></a>I2S_Get_RxBuf_Idx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Get_RxBuf_Idx
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Rx_Index
</UL>

<P><STRONG><a name="[c1]"></a>I2S_Pause</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Pause_Switch
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Pause_Switch
</UL>

<P><STRONG><a name="[c2]"></a>I2S_Resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Pause_Switch
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Pause_Switch
</UL>

<P><STRONG><a name="[bf]"></a>I2S_Start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[cd]"></a>I2S_Mute</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Mute_Switch
</UL>

<P><STRONG><a name="[be]"></a>I2S_UnMute</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2S_UnMute
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Mute_Switch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
</UL>

<P><STRONG><a name="[125]"></a>I2S_Stop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
</UL>

<P><STRONG><a name="[126]"></a>I2S_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2s_ch_get_handle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_UnMute
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Tx_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Start
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf2_Offset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf1_Addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf2_Offset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf1_Addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_MONO_STEREO
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Format
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Data_Len
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_DMA_Len
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Ch_Len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Rx_Enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_MODE
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
</UL>

<P><STRONG><a name="[250]"></a>I2S_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>ExtMem_Set_Burst_Num</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, idma.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>IDMA_Set_Burst_Unit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, idma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IDMA_Set_Burst_Unit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_redirect_to_sram
</UL>

<P><STRONG><a name="[106]"></a>IDMA_Start</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, idma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IDMA_Start &rArr; _idma_redirect_to_sram &rArr; IDMA_Set_Burst_Unit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_redirect_to_sram
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_chk_addr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
</UL>

<P><STRONG><a name="[12e]"></a>IDMA_Restart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, idma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
</UL>

<P><STRONG><a name="[12f]"></a>IDMA_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, idma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[130]"></a>IDMA_Get_Cutrrent_Length</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, idma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
</UL>

<P><STRONG><a name="[131]"></a>IDMA_Extra_Config</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, idma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
</UL>

<P><STRONG><a name="[132]"></a>IDMA_Get_Status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, idma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
</UL>

<P><STRONG><a name="[252]"></a>IDMA_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, idma.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALG_Init
</UL>

<P><STRONG><a name="[135]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[111]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_swo
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_core_1_customize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_chk_addr
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_MasterMode_Init (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_SlaveMode_Init (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[256]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[259]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[25a]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[13d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[140]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[141]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[142]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[66]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[5c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[136]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[137]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[4f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[148]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[72]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[149]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[74]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[5e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[144]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[25c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[147]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[143]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25e]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[154]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[155]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[76]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[78]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[156]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[7c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[146]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[13c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[25f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[157]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[80]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[153]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[14d]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[159]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[158]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[15d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1cb]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[15e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[14e]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[15f]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[161]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[162]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[14f]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[150]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[163]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1c8]"></a>BsrAbby</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, BsrJoe.o(i.BsrAbby))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[165]"></a>BsrAbel</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, BsrJoe.o(i.BsrAbel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BsrAbel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMya
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichael
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJoyci
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAlma
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCory
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCara
</UL>

<P><STRONG><a name="[16a]"></a>BsrAdam</STRONG> (Thumb, 228 bytes, Stack size 4 bytes, BsrJoe.o(i.BsrAdam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BsrAdam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrNia
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMya
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichael
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJoyci
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAna
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmir
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCoty
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCory
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaze
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCara
</UL>

<P><STRONG><a name="[164]"></a>BsrAlma</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, BsrDon.o(i.BsrAlma))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BsrAlma &rArr; BsrErica
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrErica
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[169]"></a>BsrAmir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, BsrDon.o(i.BsrAmir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrAmir &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_2
</UL>

<P><STRONG><a name="[16b]"></a>BsrAmos</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, BsrDon.o(i.BsrAmos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BsrAmos &rArr; BsrEden &rArr; BsrGreg
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJose
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrElsa
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrElla
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[170]"></a>BsrAna</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, BsrJim.o(i.BsrAna))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrAna &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_2
</UL>

<P><STRONG><a name="[171]"></a>BsrAnna</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, BsrDon.o(i.BsrAnna))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BsrAnna &rArr; BsrErica
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrErica
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[172]"></a>BsrAnne</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, BsrDon.o(i.BsrAnne))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BsrAnne
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
</UL>

<P><STRONG><a name="[173]"></a>BsrAnnie</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BsrDon.o(i.BsrAnnie))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BsrAnnie
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
</UL>

<P><STRONG><a name="[180]"></a>BsrAri</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, BsrJim.o(i.BsrAri))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BsrAri
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_3
</UL>

<P><STRONG><a name="[174]"></a>BsrAsa</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, BsrJim.o(i.BsrAsa))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAri
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrClay
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChazi
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaze
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaza
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChaz
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChada
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrChad
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCarae
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCara
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCale
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCadea
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCade
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
</UL>

<P><STRONG><a name="[182]"></a>BsrAvea</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, BsrJim.o(i.BsrAvea))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BsrAvea &rArr; BsrBen
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
</UL>

<P><STRONG><a name="[1c3]"></a>BsrAyla</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, BsrDon.o(i.BsrAyla))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_26
</UL>

<P><STRONG><a name="[1c5]"></a>BsrBaby</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, BsrDon.o(i.BsrBaby))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_48
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
</UL>

<P><STRONG><a name="[199]"></a>BsrBrad</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, BsrBen.o(i.BsrBrad))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrErik
</UL>

<P><STRONG><a name="[176]"></a>BsrCade</STRONG> (Thumb, 344 bytes, Stack size 36 bytes, BsrJay.o(i.BsrCade))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BsrCade
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[175]"></a>BsrCadea</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, BsrJay.o(i.BsrCadea))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BsrCadea
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[177]"></a>BsrCale</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, BsrJay.o(i.BsrCale))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[178]"></a>BsrCara</STRONG> (Thumb, 968 bytes, Stack size 136 bytes, BsrJay.o(i.BsrCara))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBret
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[179]"></a>BsrCarae</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, BsrJay.o(i.BsrCarae))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BsrCarae &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBret
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17c]"></a>BsrChad</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, BsrJay.o(i.BsrChad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BsrChad
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17a]"></a>BsrChada</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, BsrJay.o(i.BsrChada))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrChada
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17d]"></a>BsrChaz</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, BsrJay.o(i.BsrChaz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrChaz &rArr; BsrAbel
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17e]"></a>BsrChaza</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, BsrJay.o(i.BsrChaza))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BsrChaza
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17b]"></a>BsrChaze</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, BsrJay.o(i.BsrChaze))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrChaze &rArr; BsrAbel
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[17f]"></a>BsrChazi</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, BsrJay.o(i.BsrChazi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrChazi
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[181]"></a>BsrClay</STRONG> (Thumb, 1438 bytes, Stack size 56 bytes, BsrJay.o(i.BsrClay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BsrClay &rArr; BsrJeni
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJeni
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
</UL>

<P><STRONG><a name="[187]"></a>BsrCory</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, BsrJoy.o(i.BsrCory))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BsrCory &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJosh
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
</UL>

<P><STRONG><a name="[189]"></a>BsrCoty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BsrJoy.o(i.BsrCoty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrCoty &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrNia
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMya
</UL>

<P><STRONG><a name="[1c1]"></a>BsrDan</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, BsrJim.o(i.BsrDan))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_15
</UL>

<P><STRONG><a name="[1a1]"></a>BsrDane</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, BsrJoy.o(i.BsrDane))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
</UL>

<P><STRONG><a name="[1a2]"></a>BsrDawn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, BsrJoy.o(i.BsrDawn))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
</UL>

<P><STRONG><a name="[1a6]"></a>BsrDeja</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, BsrJoy.o(i.BsrDeja))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrDeja
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
</UL>

<P><STRONG><a name="[1a7]"></a>BsrDemi</STRONG> (Thumb, 348 bytes, Stack size 84 bytes, BsrJoy.o(i.BsrDemi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BsrDemi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
</UL>

<P><STRONG><a name="[18a]"></a>BsrDeon</STRONG> (Thumb, 326 bytes, Stack size 144 bytes, BsrJoy.o(i.BsrDeon))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJamii
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
</UL>

<P><STRONG><a name="[1a4]"></a>BsrDina</STRONG> (Thumb, 552 bytes, Stack size 144 bytes, BsrJoy.o(i.BsrDina))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BsrDina
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
</UL>

<P><STRONG><a name="[18c]"></a>BsrDion</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, BsrJoy.o(i.BsrDion))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BsrDion &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJosh
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRoy
</UL>

<P><STRONG><a name="[16c]"></a>BsrEden</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, BsrEva.o(i.BsrEden))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BsrEden &rArr; BsrGreg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrIsai
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrIrma
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrIris
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrHugo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrGreg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrGary
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEvan
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrErin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrErik
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEric
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEmma
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
</UL>

<P><STRONG><a name="[1be]"></a>BsrEli</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, BsrJim.o(i.BsrEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BsrEli
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_23
</UL>

<P><STRONG><a name="[16d]"></a>BsrElla</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, BsrEva.o(i.BsrElla))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BsrElla
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJuanitez
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
</UL>

<P><STRONG><a name="[16e]"></a>BsrElsa</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, BsrEva.o(i.BsrElsa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BsrElsa
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJuanitez
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
</UL>

<P><STRONG><a name="[195]"></a>BsrEmma</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, BsrEli.o(i.BsrEmma))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BsrEmma
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[192]"></a>BsrEric</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, BsrEli.o(i.BsrEric))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BsrEric
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[168]"></a>BsrErica</STRONG> (Thumb, 286 bytes, Stack size 12 bytes, BsrEli.o(i.BsrErica))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrErica
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnna
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAlma
</UL>

<P><STRONG><a name="[196]"></a>BsrErik</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, BsrEli.o(i.BsrErik))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BsrErik
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBrad
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[193]"></a>BsrErin</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, BsrEli.o(i.BsrErin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BsrErin
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[1bd]"></a>BsrEva</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, BsrJim.o(i.BsrEva))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
</UL>

<P><STRONG><a name="[194]"></a>BsrEvan</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, BsrEli.o(i.BsrEvan))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[197]"></a>BsrGary</STRONG> (Thumb, 174 bytes, Stack size 52 bytes, BsrAna.o(i.BsrGary))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BsrGary
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[191]"></a>BsrGreg</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, BsrAnn.o(i.BsrGreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BsrGreg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[1ca]"></a>BsrGuy</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, BsrJim.o(i.BsrGuy))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[18f]"></a>BsrHugo</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, BsrGuy.o(i.BsrHugo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BsrHugo
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[18e]"></a>BsrIris</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, BsrGuy.o(i.BsrIris))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BsrIris
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[18d]"></a>BsrIrma</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, BsrGuy.o(i.BsrIrma))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BsrIrma
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[190]"></a>BsrIsai</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, BsrGuy.o(i.BsrIsai))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[19a]"></a>BsrIvy</STRONG> (Thumb, 180 bytes, Stack size 28 bytes, BsrJim.o(i.BsrIvy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrIvy &rArr; BsrMike
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMike
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[1c2]"></a>BsrJan</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, BsrJim.o(i.BsrJan))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_19
</UL>

<P><STRONG><a name="[166]"></a>BsrJohn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, BsrAli.o(i.BsrJohn))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMya
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichael
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAlma
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCory
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCara
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEden
</UL>

<P><STRONG><a name="[16f]"></a>BsrJose</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, BsrAli.o(i.BsrJose))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[188]"></a>BsrJosh</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, BsrAli.o(i.BsrJosh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrJosh
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetNumWord
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDion
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCory
</UL>

<P><STRONG><a name="[19c]"></a>BsrJoyci</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, BsrJim.o(i.BsrJoyci))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrJoyci &rArr; BsrAbel
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[184]"></a>BsrLei</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, BsrJim.o(i.BsrLei))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMike
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBen
</UL>

<P><STRONG><a name="[19d]"></a>BsrMichael</STRONG> (Thumb, 1396 bytes, Stack size 64 bytes, BsrJim.o(i.BsrMichael))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BsrMichael &rArr; BsrBen
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[1c4]"></a>BsrMichelle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, BsrJim.o(i.BsrMichelle))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_31
</UL>

<P><STRONG><a name="[19b]"></a>BsrMike</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, BsrJim.o(i.BsrMike))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BsrMike
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrLei
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrIvy
</UL>

<P><STRONG><a name="[19e]"></a>BsrMya</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, BsrKai.o(i.BsrMya))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BsrMya &rArr; BsrCoty &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCoty
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[19f]"></a>BsrNia</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, BsrKai.o(i.BsrNia))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BsrNia &rArr; BsrCoty &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCoty
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_2
</UL>

<P><STRONG><a name="[1a0]"></a>BsrRay</STRONG> (Thumb, 284 bytes, Stack size 200 bytes, BsrKai.o(i.BsrRay))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTom
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDina
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDeon
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDawn
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDane
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCoty
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCory
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[1c9]"></a>BsrRex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, BsrKai.o(i.BsrRex))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
</UL>

<P><STRONG><a name="[1bf]"></a>BsrRey</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, BsrKai.o(i.BsrRey))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[1a5]"></a>BsrRon</STRONG> (Thumb, 1236 bytes, Stack size 64 bytes, BsrKai.o(i.BsrRon))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = BsrRon &rArr; BsrDemi
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAdam
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJose
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDemi
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDeja
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDane
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJoan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[1a9]"></a>BsrRoy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, BsrKai.o(i.BsrRoy))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BsrRoy &rArr; BsrDion &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrZoe
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
</UL>

<P><STRONG><a name="[1c6]"></a>BsrTed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, BsrKai.o(i.BsrTed))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_48
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
</UL>

<P><STRONG><a name="[1c7]"></a>BsrTia</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, BsrKai.o(i.BsrTia))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BsrTia
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
</UL>

<P><STRONG><a name="[1a3]"></a>BsrTom</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, BsrKai.o(i.BsrTom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BsrTom
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_48
</UL>

<P><STRONG><a name="[1c0]"></a>BsrTop</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, BsrKai.o(i.BsrTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrTop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[1aa]"></a>BsrTre</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, BsrKai.o(i.BsrTre))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BsrTre &rArr; BsrJoan
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJoan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
</UL>

<P><STRONG><a name="[167]"></a>BsrZoe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BsrJoe.o(i.BsrZoe))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRoy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAvea
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnnie
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnne
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAlma
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDion
</UL>

<P><STRONG><a name="[af]"></a>CSpotter_AddSample</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, CSpotterSDKApi.o(i.CSpotter_AddSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = CSpotter_AddSample &rArr; NINJA_API_13 &rArr; NINJA_API_11 &rArr; BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_23
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_15
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Result
</UL>

<P><STRONG><a name="[9a]"></a>CSpotter_GetMemoryUsage_Multi</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, CSpotterSDKApi.o(i.CSpotter_GetMemoryUsage_Multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = CSpotter_GetMemoryUsage_Multi &rArr; CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel &rArr; NINJA_API_75 &rArr; BsrRoy &rArr; BsrDion &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[1ae]"></a>CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, CSpotterSDKApi.o(i.CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel &rArr; NINJA_API_75 &rArr; BsrRoy &rArr; BsrDion &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_1
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_Multi
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[9d]"></a>CSpotter_GetNumWord</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, CSpotterSDKApi.o(i.CSpotter_GetNumWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSpotter_GetNumWord &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_31
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJosh
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[b0]"></a>CSpotter_GetResult</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, CSpotterSDKApi.o(i.CSpotter_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSpotter_GetResult &rArr; NINJA_API_47 &rArr; BsrTre &rArr; BsrJoan
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_55
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Result
</UL>

<P><STRONG><a name="[9b]"></a>CSpotter_Init_Multi</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, CSpotterSDKApi.o(i.CSpotter_Init_Multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = CSpotter_Init_Multi &rArr; CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[1b4]"></a>CSpotter_Init_MultiWithExtRejModel</STRONG> (Thumb, 488 bytes, Stack size 120 bytes, CSpotterSDKApi.o(i.CSpotter_Init_MultiWithExtRejModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = CSpotter_Init_MultiWithExtRejModel &rArr; NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_56
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_55
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_48
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_47
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_26
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_19
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_15
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_Multi
</UL>

<P><STRONG><a name="[9c]"></a>CSpotter_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, CSpotterSDKApi.o(i.CSpotter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CSpotter_Reset &rArr; NINJA_API_3 &rArr; BsrAri
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_3
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
</UL>

<P><STRONG><a name="[94]"></a>CSpotter_SetRejectionLevel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, CSpotterSDKApi.o(i.CSpotter_SetRejectionLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSpotter_SetRejectionLevel &rArr; NINJA_API_15
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_15
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress
</UL>

<P><STRONG><a name="[1af]"></a>NINJA_API_1</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, BsrGo.o(i.NINJA_API_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NINJA_API_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel
</UL>

<P><STRONG><a name="[1bc]"></a>NINJA_API_11</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, BsrGo.o(i.NINJA_API_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = NINJA_API_11 &rArr; BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEva
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEli
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBrad
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAsa
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAri
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_13
</UL>

<P><STRONG><a name="[1ab]"></a>NINJA_API_13</STRONG> (Thumb, 356 bytes, Stack size 192 bytes, BsrGo.o(i.NINJA_API_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = NINJA_API_13 &rArr; NINJA_API_11 &rArr; BsrAsa &rArr; BsrCara &rArr; BsrBret
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTop
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRey
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmos
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_11
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJose
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_AddSample
</UL>

<P><STRONG><a name="[1ac]"></a>NINJA_API_15</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BsrGo.o(i.NINJA_API_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NINJA_API_15
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDan
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_SetRejectionLevel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_AddSample
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b8]"></a>NINJA_API_19</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, BsrGo.o(i.NINJA_API_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NINJA_API_19
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1ba]"></a>NINJA_API_2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, BsrGo.o(i.NINJA_API_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NINJA_API_2 &rArr; BsrNia &rArr; BsrCoty &rArr; BsrAdam
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrNia
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAna
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmir
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1ad]"></a>NINJA_API_23</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, BsrGo.o(i.NINJA_API_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NINJA_API_23 &rArr; BsrEli
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrEli
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_AddSample
</UL>

<P><STRONG><a name="[1b9]"></a>NINJA_API_26</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, BsrGo.o(i.NINJA_API_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NINJA_API_26
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAyla
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1bb]"></a>NINJA_API_3</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, BsrGo.o(i.NINJA_API_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NINJA_API_3 &rArr; BsrAri
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAri
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Reset
</UL>

<P><STRONG><a name="[1b1]"></a>NINJA_API_31</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, BsrGo.o(i.NINJA_API_31))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichelle
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetNumWord
</UL>

<P><STRONG><a name="[1b2]"></a>NINJA_API_47</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, BsrGo.o(i.NINJA_API_47))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NINJA_API_47 &rArr; BsrTre &rArr; BsrJoan
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTre
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTia
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTed
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBaby
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetResult
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b6]"></a>NINJA_API_48</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, BsrGo.o(i.NINJA_API_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NINJA_API_48 &rArr; BsrTom
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTom
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTed
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBaby
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b3]"></a>NINJA_API_55</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, BsrGo.o(i.NINJA_API_55))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetResult
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b7]"></a>NINJA_API_56</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, BsrGo.o(i.NINJA_API_56))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b5]"></a>NINJA_API_73</STRONG> (Thumb, 950 bytes, Stack size 128 bytes, BsrGo.o(i.NINJA_API_73))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = NINJA_API_73 &rArr; BsrRay &rArr; BsrDeon &rArr; BsrJamii
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTom
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrNia
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMya
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichelle
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichael
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJoyci
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrIvy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrGuy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDan
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrBaby
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAri
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnna
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAna
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAmir
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAlma
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAbby
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_75
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrJohn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_Init_MultiWithExtRejModel
</UL>

<P><STRONG><a name="[1b0]"></a>NINJA_API_75</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, BsrGo.o(i.NINJA_API_75))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = NINJA_API_75 &rArr; BsrRoy &rArr; BsrDion &rArr; BsrJosh
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRoy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAvea
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnnie
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAnne
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NINJA_API_73
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpotter_GetMemoryUsage_MultiWithSpeakerAndExtRejModel
</UL>

<P><STRONG><a name="[152]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[14a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[83]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[51]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1d1]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
</UL>

<P><STRONG><a name="[1cc]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
</UL>

<P><STRONG><a name="[1cf]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process (via Veneer)
</UL>

<P><STRONG><a name="[262]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1d8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[263]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1d7]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process (via Veneer)
</UL>

<P><STRONG><a name="[1d2]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ce]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
</UL>

<P><STRONG><a name="[1d3]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process_init (via Veneer)
</UL>

<P><STRONG><a name="[264]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1d4]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[60]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[64]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[1da]"></a>dynamic_default_gain</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, snx_audio_agc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dynamic_default_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process
</UL>

<P><STRONG><a name="[1d9]"></a>saturation_protect</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, snx_audio_agc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = saturation_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process
</UL>

<P><STRONG><a name="[1d5]"></a>update_NoiseFloor</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, snx_audio_agc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_NoiseFloor
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNX_AGC_Process
</UL>

<P><STRONG><a name="[96]"></a>SNX_AGC_Process</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, snx_audio_agc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SNX_AGC_Process &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_NoiseFloor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturation_protect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynamic_default_gain
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Recognition_Progress (via Veneer)
</UL>

<P><STRONG><a name="[a3]"></a>SNX_AGC_Process_init</STRONG> (Thumb, 896 bytes, Stack size 72 bytes, snx_audio_agc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SNX_AGC_Process_init &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGC_Init (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>Convert_to_Codec_Channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>Convert_to_Codec_Sampling_Rate</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, audio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start (via Veneer)
</UL>

<P><STRONG><a name="[1e0]"></a>Convert_to_Aud_Sampling_Rate</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, audio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Audio_Codec_Init
</UL>

<P><STRONG><a name="[a5]"></a>External_Audio_Codec_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = External_Audio_Codec_Init &rArr; SNAUD01_MasterMode_Init &rArr; SNAUD01_dac_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_MasterMode_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_Driver_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_to_Aud_Sampling_Rate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start (via Veneer)
</UL>

<P><STRONG><a name="[1f7]"></a>I2C_ch_sel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_Driver_Init
</UL>

<P><STRONG><a name="[1e3]"></a>SCL_rd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_read
</UL>

<P><STRONG><a name="[1e5]"></a>SDA_rd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
</UL>

<P><STRONG><a name="[1f2]"></a>I2C_SoftWare_Master_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_ReInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_Driver_Init
</UL>

<P><STRONG><a name="[1ec]"></a>ACK_read_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
</UL>

<P><STRONG><a name="[1ed]"></a>ACK_read_deinit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i2c_software_master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
</UL>

<P><STRONG><a name="[1e2]"></a>SCL_read</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCL_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_Master_read
</UL>

<P><STRONG><a name="[1e4]"></a>SDA_read</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDA_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_Master_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[1e7]"></a>I2C_delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_Master_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[265]"></a>I2C_delay_C</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_software_master.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>I2C_delay_2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_software_master.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>I2C_delay_3</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_software_master.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>I2C_Start</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Start &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_Master_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
</UL>

<P><STRONG><a name="[1e8]"></a>I2C_Stop</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Stop &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1e9]"></a>I2C_Ack</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Ack &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
</UL>

<P><STRONG><a name="[1ea]"></a>I2C_NoAck</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_NoAck &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
</UL>

<P><STRONG><a name="[1eb]"></a>I2C_WaitAck</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_WaitAck &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_read_deinit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
</UL>

<P><STRONG><a name="[1ee]"></a>I2C_SendByte</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendByte &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
</UL>

<P><STRONG><a name="[1ef]"></a>I2C_SendByte2</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, i2c_software_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>

<P><STRONG><a name="[1f0]"></a>I2C_ReceiveByte</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_ReceiveByte &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_read_deinit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACK_read_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
</UL>

<P><STRONG><a name="[1f1]"></a>I2C_SoftWare_Master_ReInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_SoftWare_Master_ReInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
</UL>

<P><STRONG><a name="[1f3]"></a>I2C_SoftWare_Master_Write</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_SoftWare_Master_Write &rArr; I2C_SendByte &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_ReInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1f4]"></a>I2C_Start_Master_read</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Start_Master_read &rArr; I2C_Start &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
</UL>

<P><STRONG><a name="[1f5]"></a>I2C_SoftWare_Master_Read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2c_software_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_SoftWare_Master_Read &rArr; I2C_Start_Master_read &rArr; I2C_Start &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_Master_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveByte
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1fa]"></a>Delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aud_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_ADC_Gain_Setting
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_DAC_Volume
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_MasterMode_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_SlaveMode_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up
</UL>

<P><STRONG><a name="[90]"></a>AUD_RegWrite</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AUD_RegWrite &rArr; I2C_Master_Send &rArr; I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_Off
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_On
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Volume_Control
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_debug_mode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_ADC_Gain_Setting
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_DAC_Volume
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_MasterMode_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_SlaveMode_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_up
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Gain_Ctrl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Setting (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>AUD_RegRead</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AUD_RegRead &rArr; I2C_Master_Send &rArr; I2C_Set_Stop_Condition
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv (via Veneer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bswap_16
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Write
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_Off
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_AMP_Turn_On
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Volume_Control
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_debug_mode
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_list_all_reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_Get_DAC_Volume
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_ADC_Gain_Setting
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_DAC_Volume
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_MasterMode_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_SlaveMode_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_up
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Gain_Ctrl
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gain_Setting (via Veneer)
</UL>

<P><STRONG><a name="[268]"></a>AUD_mclk_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, aud_driver.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>AUD_mclk_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, aud_driver.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>AUD_Driver_Init</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AUD_Driver_Init &rArr; I2C_Initial &rArr; I2C_SlaveFIFO_EN
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftWare_Master_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ch_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Audio_Codec_Init
</UL>

<P><STRONG><a name="[1f8]"></a>AUD_SlaveMode_Init</STRONG> (Thumb, 1392 bytes, Stack size 16 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>

<P><STRONG><a name="[1fb]"></a>AUD_MasterMode_Init</STRONG> (Thumb, 2124 bytes, Stack size 32 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>

<P><STRONG><a name="[1fc]"></a>AUD_DAC_Volume</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1fd]"></a>AUD_ADC_Gain_Setting</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1fe]"></a>AUD_Get_DAC_Volume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1e1]"></a>SNAUD01_MasterMode_Init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SNAUD01_MasterMode_Init &rArr; SNAUD01_dac_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_up
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Audio_Codec_Init
</UL>

<P><STRONG><a name="[205]"></a>SNAUD01_power_down</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down
</UL>

<P><STRONG><a name="[206]"></a>SNAUD01_sleep</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down
</UL>

<P><STRONG><a name="[207]"></a>SNAUD01_list_all_reg</STRONG> (Thumb, 1050 bytes, Stack size 16 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[208]"></a>SNAUD01_debug_mode</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[26a]"></a>AUD_Set_Driver_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aud_driver.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>AUD01_ADC_Turn_On</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_up
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up
</UL>

<P><STRONG><a name="[20a]"></a>AUD01_ADC_Turn_Off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_adc_power_down
</UL>

<P><STRONG><a name="[a6]"></a>AUD01_ADC_Gain_Ctrl</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = AUD01_ADC_Gain_Ctrl &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Start (via Veneer)
</UL>

<P><STRONG><a name="[20b]"></a>AUD01_DAC_Turn_On</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_up
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_up
</UL>

<P><STRONG><a name="[20c]"></a>AUD01_DAC_Turn_Off</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_dac_power_down
</UL>

<P><STRONG><a name="[20d]"></a>AUD01_DAC_Volume_Control</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[20e]"></a>AUD01_AMP_Turn_On</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[20f]"></a>AUD01_AMP_Turn_Off</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[210]"></a>AUD01_dpd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sys_power_down
</UL>

<P><STRONG><a name="[213]"></a>I2S4_Clr_Rx_FIFO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Enable
</UL>

<P><STRONG><a name="[212]"></a>I2S4_Clr_Tx_FIFO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Enable
</UL>

<P><STRONG><a name="[211]"></a>I2S4_Enable</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, i2s4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2S4_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Clr_Tx_FIFO
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Clr_Rx_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Init
</UL>

<P><STRONG><a name="[26b]"></a>I2S4_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>I2S4_Set_Ch_Len</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>I2S4_Set_Data_Len</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>I2S4_Set_Format</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>I2S4_Set_MONO_STEREO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>I2S4_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Init
</UL>

<P><STRONG><a name="[270]"></a>I2S4_Mute</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>I2S4_UnMute</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>I2S4_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>I2S4_SEL_IMCLK</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>I2S4_SET_BCLKDIV</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>I2S4_SET_IMCLKDIV</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>I2S4_Clr_Int_Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>I2S4_Set_Rx_THD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>I2S4_Set_Tx_THD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>I2S4_Set_INT_Enable</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>I2S4_Set_INT_Disable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>I2S4_Read_Rx_FIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_MONO_Handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_32Bit_STD_Handler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_16Bit_STD_Handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_8Bit_STD_Handler
</UL>

<P><STRONG><a name="[217]"></a>I2S4_Write_Tx_FIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_MONO_Handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_32Bit_STD_Handler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_16Bit_STD_Handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_8Bit_STD_Handler
</UL>

<P><STRONG><a name="[27b]"></a>I2S4_Read_IP_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>I2S4_Read_Int_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>I2S4_Read_Tx_FIFO_Status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>I2S4_Read_Rx_FIFO_Status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>I2S4_MCLK_OUT0_SEL</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>I2S4_MCLK_OUT1_SEL</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>I2S4_MCLK_OUT_ENABLE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2s4.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>I2S4_MCLK_OUT0_OUT1_SEL</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, i2s4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Init
</UL>

<P><STRONG><a name="[aa]"></a>I2S4_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, i2s4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S4_Init &rArr; I2S4_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_MCLK_OUT0_OUT1_SEL
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Start
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;External_Audio_Codec_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[216]"></a>I2S4_8Bit_STD_Handler</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Write_Tx_FIFO
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Read_Rx_FIFO
</UL>

<P><STRONG><a name="[219]"></a>I2S4_16Bit_STD_Handler</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Write_Tx_FIFO
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Read_Rx_FIFO
</UL>

<P><STRONG><a name="[21a]"></a>I2S4_32Bit_STD_Handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Write_Tx_FIFO
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Read_Rx_FIFO
</UL>

<P><STRONG><a name="[21b]"></a>I2S4_MONO_Handler</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, i2s4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Write_Tx_FIFO
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Read_Rx_FIFO
</UL>

<P><STRONG><a name="[10f]"></a>UART_Init</STRONG> (Thumb, 764 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_set_freq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Driver_Init (via Veneer)
</UL>

<P><STRONG><a name="[282]"></a>uart_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>UART_ReadByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_get_handle
</UL>

<P><STRONG><a name="[112]"></a>UART_WriteByte</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_get_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
</UL>

<P><STRONG><a name="[21f]"></a>UART_WriteMultiBytes</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_get_handle
</UL>

<P><STRONG><a name="[283]"></a>UART_ReadIrqByte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_IRQHandler &rArr; _uart_irq_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_irq_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART1_IRQHandler &rArr; _uart_irq_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_irq_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[284]"></a>UART_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>UART_READ</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>UART_AVAILABLE</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>UART_PEEK</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>UART_END</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>UART_WRITEBYTE</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_get_handle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b1]"></a>_exec_init_script</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _exec_init_script
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_clock_setting
</UL>

<P><STRONG><a name="[52]"></a>_init_clock_setting</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _init_clock_setting &rArr; _exec_init_script
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_exec_init_script
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>_init_core_1_customize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _init_core_1_customize &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>_init_icache</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>_init_spi_nand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>bswap_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aud_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>

<P><STRONG><a name="[1ff]"></a>SNAUD01_sys_power_up</STRONG> (Thumb, 872 bytes, Stack size 40 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SNAUD01_sys_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Turn_On
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Turn_On
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_MasterMode_Init
</UL>

<P><STRONG><a name="[200]"></a>SNAUD01_dac_power_up</STRONG> (Thumb, 2702 bytes, Stack size 40 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SNAUD01_dac_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Turn_On
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_MasterMode_Init
</UL>

<P><STRONG><a name="[201]"></a>SNAUD01_adc_power_up</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, aud_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SNAUD01_adc_power_up &rArr; printf_uart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Turn_On
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_MasterMode_Init
</UL>

<P><STRONG><a name="[202]"></a>SNAUD01_sys_power_down</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_dpd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_power_down
</UL>

<P><STRONG><a name="[203]"></a>SNAUD01_dac_power_down</STRONG> (Thumb, 1792 bytes, Stack size 40 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_DAC_Turn_Off
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_power_down
</UL>

<P><STRONG><a name="[204]"></a>SNAUD01_adc_power_down</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, aud_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_uart (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUD01_ADC_Turn_Off
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_sleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNAUD01_power_down
</UL>

<P><STRONG><a name="[21c]"></a>_uart_get_handle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WRITEBYTE
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteMultiBytes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[220]"></a>_uart_irq_handle</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _uart_irq_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>_uart_set_freq</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[b4]"></a>Check_Serial_Number_is_Correct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, codec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Disable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Pause_Switch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_DMA_Address_and_Length
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Turn_On
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Mute_Switch
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set_Channel_Mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_DMA_Address_and_Length
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Pause_Switch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Turn_On
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Set_Channel_Mode
</UL>

<P><STRONG><a name="[da]"></a>_I2C_Get_Handle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Stop_Condition
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Default_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_THD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_Disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveFIFO_EN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTxFIFO_Clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveRxFIFO_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_NACK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_ACK
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Receive_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Status
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Clear_Flag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Start_Condition
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_SlaveRxFIFO_Start
</UL>

<P><STRONG><a name="[f3]"></a>_i2c_time_out_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[f4]"></a>_i2c_time_out</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Recv_10bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_Send_10bit
</UL>

<P><STRONG><a name="[eb]"></a>_I2C_Address_Setting</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _I2C_Address_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Default_Init
</UL>

<P><STRONG><a name="[ec]"></a>_I2C_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Default_Init
</UL>

<P><STRONG><a name="[f0]"></a>_I2C_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Deinit
</UL>

<P><STRONG><a name="[e6]"></a>_I2C_SlaveRxFIFO_Start</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _I2C_SlaveRxFIFO_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2C_Get_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[ee]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[ed]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initial
</UL>

<P><STRONG><a name="[fb]"></a>reg_write_mask_bits</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spifc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reg_write_mask_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_SetAddrMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Init
</UL>

<P><STRONG><a name="[fe]"></a>_SPIFC_RWStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spifc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SPIFC_RWStatus &rArr; reg_read_mask_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_bits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_GetFactoryId
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_RWStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Erase
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
</UL>

<P><STRONG><a name="[103]"></a>reg_clear_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spifc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_SetQuadMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Deinit
</UL>

<P><STRONG><a name="[ff]"></a>reg_set_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spifc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_GetFactoryId
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_SetQuadMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Erase
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
</UL>

<P><STRONG><a name="[fd]"></a>reg_write_bits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_ReadWithDma
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Erase
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_WriteWithDma
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Deinit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[fc]"></a>reg_read_bits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spifc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_GetFactoryId
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_mask_bits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
</UL>

<P><STRONG><a name="[100]"></a>reg_read_mask_bits</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spifc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reg_read_mask_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_read_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_GetFactoryId
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Erase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFC_Deinit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIFC_RWStatus
</UL>

<P><STRONG><a name="[116]"></a>_i2s_ch_get_handle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Tx_Toggle_IRQ
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Rx_Toggle_IRQ
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_Tx_Toggle_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_Rx_Toggle_IRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_UnMute
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Tx_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Start
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf2_Offset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_TxBuf1_Addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf2_Offset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_RxBuf1_Addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_MONO_STEREO
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Format
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Data_Len
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_DMA_Len
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Ch_Len
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Rx_Enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Resume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Pause
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Mute
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_MODE
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_TxBuf_Idx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_TxBuf1_Addr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_RxBuf_Idx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Get_RxBuf1_Addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Disable
</UL>

<P><STRONG><a name="[118]"></a>_I2S_SET_IMCLKDIV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FPLL_case
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XTAL_case
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IHRC_case
</UL>

<P><STRONG><a name="[117]"></a>_IHRC_case</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _IHRC_case
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_BCLKDIV
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2S_SET_IMCLKDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
</UL>

<P><STRONG><a name="[11a]"></a>_XTAL_case</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XTAL_case
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_BCLKDIV
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2S_SET_IMCLKDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
</UL>

<P><STRONG><a name="[11d]"></a>_IMCLK_I2S_4_case</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
</UL>

<P><STRONG><a name="[11b]"></a>_FPLL_case</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FPLL_case
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_SET_BCLKDIV
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2S_SET_IMCLKDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_BCLK
</UL>

<P><STRONG><a name="[122]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Tx_Toggle_IRQ
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Rx_Toggle_IRQ
</UL>

<P><STRONG><a name="[123]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Tx_Toggle_IRQ
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Rx_Toggle_IRQ
</UL>

<P><STRONG><a name="[121]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Tx_Toggle_IRQ
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Set_Rx_Toggle_IRQ
</UL>

<P><STRONG><a name="[127]"></a>reg_write_mask_bits</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, idma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reg_write_mask_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Stop
</UL>

<P><STRONG><a name="[12b]"></a>_idma_get_handle</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, idma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_redirect_to_sram
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Get_Status
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Extra_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Get_Cutrrent_Length
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Stop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Restart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Set_Burst_Unit
</UL>

<P><STRONG><a name="[129]"></a>_idma_chk_addr</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, idma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _idma_chk_addr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
</UL>

<P><STRONG><a name="[12c]"></a>_idma_redirect_to_sram</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, idma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _idma_redirect_to_sram &rArr; IDMA_Set_Burst_Unit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idma_get_handle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Set_Burst_Unit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
</UL>

<P><STRONG><a name="[128]"></a>reg_write_bits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, idma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_write_mask_bits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
</UL>

<P><STRONG><a name="[12d]"></a>reg_read_mask_bits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, idma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMA_Get_Status
</UL>

<P><STRONG><a name="[183]"></a>BsrBen</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, BsrJim.o(i.BsrBen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BsrBen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrLei
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrMichael
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrAvea
</UL>

<P><STRONG><a name="[1a8]"></a>BsrJoan</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, BsrKai.o(i.BsrJoan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BsrJoan
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrTre
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrRon
</UL>

<P><STRONG><a name="[198]"></a>BsrJuanitez</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, BsrEva.o(i.BsrJuanitez))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrElsa
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrElla
</UL>

<P><STRONG><a name="[185]"></a>BsrBret</STRONG> (Thumb, 294 bytes, Stack size 60 bytes, BsrJay.o(i.BsrBret))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BsrBret
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCarae
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrCara
</UL>

<P><STRONG><a name="[186]"></a>BsrJeni</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, BsrJay.o(i.BsrJeni))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BsrJeni
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrClay
</UL>

<P><STRONG><a name="[18b]"></a>BsrJamii</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, BsrJoy.o(i.BsrJamii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BsrJamii
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsrDeon
</UL>

<P><STRONG><a name="[50]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
